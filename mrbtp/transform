#! /bin/bash
#  -*- mode: Shell; -*-
#
#######################################################
#
# MRBTP = Modified Ryan Baumann Transformation Process
#
# Script to convert a CSV file created from a stream
#  file to an AHCIP ingest input file with proper
#  CTS URNs. This is done with a set of ex files
#  that modify a copy of the input file.
#
#################################################

#################
# CONFIGURATION #
#################

#############
# FUNCTIONS #
#############

##########################################################
# Print out help message for using the program and exit. #
##########################################################

helpmsg () {
    echo "${PROGNAME} [-h|--help] [-o|--output] <outputfile> <inputfile>"
    echo ""
    echo "Transform a CSV file for input to AHCIP"
    echo "-h or --help displays this help message"
    echo "-o or --output selects outputfile. If not supplied, outputfile"
    echo "  will be \${inputfile}_ahcip.csv"
    echo ""
}

##########################################################
# Parse the arguments on the command line                #
##########################################################

parse_commandline () {

    outfile=''
    while [ $# -gt 1 ]
    do
	case $1 in
	    -h | --help )
		helpmsg
		exit 0
		;;

	    -o | --output )
		if [ "X$2" != "X" ]; then
		    outfile=$2
		    shift
		else
		    helpmsg
		    exit 1
		fi
		;;
	esac

	shift
    done

    lastparam=$1

    if [ X${lastparam} = X ]; then helpmsg; exit 1; fi

    if [[ ${lastparam} =~ ^(-h|--help)$ ]]; then helpmsg; exit 0; fi

    export SRCFILE=${lastparam}
    
    if [ X${outfile} = X ]
    then
	outfile="`basename ${SRCFILE}`_ahcip.csv"
    fi
    export OUTFILE="${outfile}"

}

###############################
# Apply an ex file to $OUTPUT #
###############################
apply_ex_file () {
    exfile=$1

    if [ ! -f ${exfile} ]; then
	echo "Unable to find ex file $exfile"
	exit 1
    fi

    echo "Applying ${exfile}"

    ex -S ${exfile} ${OUTFILE}
    
    echo "Finished applying ${exfile}"
}

############################
# MAIN PROGRAM BEGINS HERE #
############################

export PROGNAME=`basename $0`

parse_commandline $*

if [ ! -r ${SRCFILE} ]
then
  echo "Unable to read ${SRCFILE}"
  exit 1
fi  

# Running ex is a destructive process
cp -p ${SRCFILE} ${OUTFILE}

# Split slash source references like I.16.122-124/127-128
# If there are more than six slashes in an input line, 
# edit the script
apply_ex_file split-slash-refs.ex

# Split comma references in commentary clauses
# like 
apply_ex_file split-comma-refs.ex

### These transforms should be done last!

# Replace the stream format abbreviation for the
# primary source reference to a CTS URN
## FIXME - Uncomment Below
##apply_ex_file set-source-urn.ex

# Replace the stream format abbreviation of the
# source of the commentary with a cTS URN
# apply_ex_file set-commentary-urn.ex